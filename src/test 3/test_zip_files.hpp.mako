#ifndef ZIP_CRACKER_TEST_ZIP_FILES_HPP
#define ZIP_CRACKER_TEST_ZIP_FILES_HPP
<%!
from pathlib import Path
from sh import bash
from tempfile import TemporaryDirectory
from io import StringIO

def make_zip(args, files):
  with TemporaryDirectory() as d:
    files = list(files)
    for name, contents in files:
      path = Path(d) / name
      path.parent.mkdir(parents=True, exist_ok=True)
      with path.open("w") as f:
        f.write(contents)
    names = " ".join(x[0] for x in files)
    bash("-c", f"cd {d} && zip archive.zip {args} {names}")
    with (Path(d) / "archive.zip").open("rb") as f:
      return ", ".join(f"std::byte{'{'}0x{b:02x}u{'}'}" for b in f.read())

def make_piped_zip(args, contents):
  with TemporaryDirectory() as d:
    stdin = StringIO()
    stdin.write(contents)
    stdin.seek(0)
    bash("-c", f"cd {d} && zip archive.zip {args} -", _in=stdin)
    with (Path(d) / "archive.zip").open("rb") as f:
      return ", ".join(f"std::byte{'{'}0x{b:02x}u{'}'}" for b in f.read())
%>
/**
 * This file is generated by test_zip_files.hpp.mako; do not edit it directly.
 */

#include <cstdint>

namespace zip_cracker::test {

std::byte one_unencrypted_compressed_text_file[] = {${make_zip(
    "", (("test.txt", "blah di blah di blah di blah di blah di blah\n"), ))}};

std::byte one_encrypted_compressed_text_file[] = {${make_zip(
    "--encrypt --password test",
    (("test.txt", "blah di blah di blah di blah di blah di blah\n"), ))}};

std::byte encrypted_uncompressed_zip[] = {
    ${make_zip("--encrypt --password test",
               (("test_file.txt", "test\n"), ("empty_file.txt", ""),
                ("subdir/other_file.txt", "other test\n"),
                ("and_another.txt", "blah blah\n"), ))}};

std::byte encrypted_compressed_piped_text_file[] = {
    ${make_piped_zip("--encrypt --password test",
                     "blah di blah di blah di blah di blah di blah\n")}};

std::byte encrypted_empty_piped_text_file[] = {
    ${make_piped_zip("--encrypt --password test", "")}};

} // namespace zip_cracker::test

#endif /* ZIP_CRACKER_TEST_ZIP_FILES_HPP */
